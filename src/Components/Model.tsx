//@ts-nocheck
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";

import React, { useEffect } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { useCustomization } from "../Contexts/Customization";
//@ts-ignore

const Cup = (props) => {
  const { color, setColor, image, setimage } = useCustomization();
  const { nodes, materials } = useGLTF("./Models/CupNew.glb");
  //@ts-ignore

  var lid1_texture = useTexture({
    map: "../Textures/Plastic/Plastic_003_height.jpg",
    displacementMap: "../Textures/Plastic/Plastic_003_height.jpg",
    normalMap: "../Textures/Plastic/Plastic_003_normal.jpg",
    roughnessMap: "../Textures/Plastic/Plastic_003_roughness.jpg",
    aoMap: "../Textures/Plastic/Plastic_003_ambientOcclusion.jpg",
  });

  // const loadTexture = (image) => {
    var lid1_texture = useTexture(image);
    lid1_texture.map.repeat.set(1, 1);
    lid1_texture.normalMap.repeat.set(1, 1);
    lid1_texture.roughnessMap.repeat.set(1, 1);
    lid1_texture.aoMap.repeat.set(1, 1);
    // lid1_texture.flipY = true;
    lid1_texture.mirror = true;
    // lid1_texture.map.wrapS = lid1_texture.map.wrapT =
    //   THREE.MirroredRepeatWrapping;
    // lid1_texture.normalMap.wrapS = lid1_texture.normalMap.wrapT =
    //   THREE.MirroredRepeatWrapping;
    // lid1_texture.roughnessMap.wrapS = lid1_texture.roughnessMap.wrapT =
    //   THREE.MirroredRepeatWrapping;
    // lid1_texture.aoMap.wrapS = lid1_texture.aoMap.wrapT = THREE.RepeatWrapping;
    
    // var lid1_texture = useTexture(image);
    // lid1_texture.map.repeat.set(3, 3);
    // lid1_texture.normalMap.repeat.set(3, 3);
    // lid1_texture.roughnessMap.repeat.set(3, 3);
    // lid1_texture.aoMap.repeat.set(3, 3);
    // lid1_texture.map.wrapS = lid1_texture.map.wrapT =
    //   THREE.MirroredRepeatWrapping;
    // lid1_texture.normalMap.wrapS = lid1_texture.normalMap.wrapT =
    //   THREE.MirroredRepeatWrapping;
    // lid1_texture.roughnessMap.wrapS = lid1_texture.roughnessMap.wrapT =
    //   THREE.MirroredRepeatWrapping;
    // lid1_texture.aoMap.wrapS = lid1_texture.aoMap.wrapT = THREE.RepeatWrapping;
  // };

  // useEffect(() => {
  //   loadTexture(image);
  // }, [image]);

  // const lid1_texture = useTexture({
  //   map: "../Textures/Paper/Watercolor_Paper_001_COLOR.jpg",
  //   displacementMap: "../Textures/Paper/Watercolor_Paper_001_DISP.png",
  //   normalMap: "../Textures/Paper/Watercolor_Paper_001_NORM.jpg",
  //   roughnessMap: "../Textures/Paper/Watercolor_Paper_001_ROUGH.jpg",
  //   aoMap: "../Textures/Paper/Watercolor_Paper_001_OCC.jpg",
  // });

  // const lid1_texture = useTexture({
  //   map: "../Textures/Wallpaper/Wallpaper_001_COLOR.jpg",
  //   displacementMap: "../Textures/Wallpaper/Wallpaper_001_DISP.jpg",
  //   normalMap: "../Textures/Wallpaper/Wallpaper_001_NRM.jpg",
  //   roughnessMap: "../Textures/Wallpaper/Wallpaper_001_SPEC.jpg",
  //   aoMap: "../Textures/Wallpaper/Wallpaper_001_OCC.jpg",
  // });

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_0.geometry}
        material={nodes.mesh_0.material}
      >
        <meshStandardMaterial {...lid1_texture} color={color} />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_0_1.geometry}
        material={nodes.mesh_0_1.material}
      >
        <meshStandardMaterial />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_0_2.geometry}
        material={nodes.mesh_0_2.material}
      >
        <meshStandardMaterial color={color} />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_0_3.geometry}
        material={nodes.mesh_0_3.material}
      >
        <meshStandardMaterial color={color} />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_0_4.geometry}
        material={nodes.mesh_0_4.material}
      >
        <meshStandardMaterial color={color} />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_0_5.geometry}
        material={nodes.mesh_0_5.material}
      />
    </group>
  );
};

useGLTF.preload("./Models/CupNew.glb");

export default Cup;
